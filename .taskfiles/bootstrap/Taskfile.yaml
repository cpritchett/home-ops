---
version: "3"

tasks:
  apps:
    desc: Bootstrap Kubernetes Apps
    prompt: Bootstrap Kubernetes Apps ...?
    cmds:
      - kubectl config set-cluster {{.CONTEXT}} --server https://{{.RANDOM_CONTROLLER}}:6443
      - defer: talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force {{.KUBERNETES_DIR}}
      - echo "Applying external secrets and bootstrapping apps..."
      - op inject --in-file {{.BOOTSTRAP_DIR}}/secrets.yaml.tpl | kubectl apply --server-side --filename -
      - helmfile --file {{.BOOTSTRAP_DIR}}/helmfile.yaml sync --hide-notes
    vars:
      CONTEXT:
        sh: talosctl config info --output json | jq --raw-output '.context'
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | sort -R | head -1
    preconditions:
      - op user get --me
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - test -f {{.BOOTSTRAP_DIR}}/helmfile.yaml
      - test -f {{.BOOTSTRAP_DIR}}/secrets.yaml.tpl
      - which helmfile jq kubectl op talosctl

  app-secrets:
    desc: Bootstrap API keys for application services (solves chicken/egg problem)
    cmd: ./scripts/bootstrap-app-secrets.sh
    preconditions:
      - op user get --me
      - kubectl cluster-info

  cloudflare-tunnel:
    desc: Set up Cloudflare tunnel for external service access
    cmd: ./scripts/setup-cloudflare-tunnel.sh
    preconditions:
      - op user get --me
      - which cloudflared
      - which jq

  talos-cluster:
    desc: Bootstrap Talos controlplane nodes. [NODE=required]
    requires:
      vars: [NODE]
    cmds:
      - until talosctl --nodes {{.NODE}} bootstrap; do echo "Bootstrap failed, retrying in 5s..."; sleep 5; done
      - echo "Bootstrap successful, generating kubeconfig..."
      - talosctl kubeconfig --nodes {{.NODE}} --force {{.KUBERNETES_DIR}}
      - echo "âœ… Bootstrap complete! Cluster ready for applications."
    preconditions:
      - op user get --me
      - talosctl config info
